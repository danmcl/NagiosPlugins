#!/usr/bin/python
import os
import commands
import sys
from optparse import OptionParser
import csv
parser = OptionParser()
parser.add_option("-H", "--host", dest="host",
                  help="Hostname/FQDN or IP address")
parser.add_option("-p", "--port", type="int", dest="port",default="1248",
                  help="Port that nc_net or nsclient++ is running on (1248)")
parser.add_option("-w", "--warning", dest="warning", default=70,
                  help="Warning Threshold (percentage of interface speed)")
parser.add_option("-c", "--critical", dest="critical", default=90,
                  help="Critical Threshold (percentage of interface speed)")
parser.add_option("-S", "--special", action="store_true", dest="special", default=False,
                  help="Include special interfaces Teredo IPv6 tunnel and isatap")
parser.add_option("-D", "--disconnected", action="store_true", dest="disconnected", default=False,
                  help="Include disconnected interfaces (interface speed = 0)")
parser.add_option("-P", "--prefix", dest="prefix", default="None",
                  help="Prefix to Be used Kilo/K, Mega/M, Giga/G, if none specified  bits/bytes will be used")
parser.add_option("-r", "--raw", action="store_true", dest="raw", default=False,
                  help="Use raw values for Warning and Critical thresholds (affected by prefix used i.e.  -r -w 1000 -P kilo  will set Warning threshold to 1000 Kilobits/sec)")
(options, args) = parser.parse_args()
host=options.host
port=str(options.port)
special=str(options.special)
disconnected=str(options.disconnected)
prefix=str(options.prefix)
warning=int(options.warning)
critical=int(options.critical)
raw=options.raw
if prefix is "None":
	divisor=1
elif prefix.upper()[0] is "K":
	divisor=1000
elif prefix.upper()[0] is "M":
	divisor=1000**2
elif prefix.upper()[0] is "G":
	divisor=1000**3
else:
	print "Sorry you have entered "+prefix+", which is not a valid prefix, please use either Kilo/K, Mega/M, Giga/G"
	exit(3)
listInterfaces="/usr/local/nagios/libexec/check_nt -H "+host+" -p "+port+" -v INSTANCES -l \"Network Interface\""
status, output = commands.getstatusoutput(listInterfaces)
interfaces=output[21:].split(',')
interfaces.sort()
interfaceID=int(1)
outputlist=[]
#Stripping builtin IPv6 tunneling interface Teredo & isatap interfaces if Special is not enabled
if special == "False":
	interfaces = [tup for tup in interfaces if not "Teredo" in tup]
	interfaces = [tup for tup in interfaces if not "isatap" in tup]
for i in interfaces:
	getInterfaceSpeed="/usr/local/nagios/libexec/check_nt -H "+host+" -p "+port+" -v COUNTER -l  \"\\\\Network Interface("+i+")\\\\Current Bandwidth\""
	getInterfaceRead="/usr/local/nagios/libexec/check_nt -H "+host+" -p "+port+" -v COUNTER -l  \"\\\\Network Interface("+i+")\\\\Bytes Received/sec\""
	getInterfaceSent="/usr/local/nagios/libexec/check_nt -H "+host+" -p "+port+" -v COUNTER -l  \"\\\\Network Interface("+i+")\\\\Bytes Sent/sec\""
	speedstatus, speed = commands.getstatusoutput(getInterfaceSpeed)
	calcSpeed=float(speed)/divisor
	prefixOutput=prefix.upper()[0]

	if disconnected == "True":
		readstatus, actualReadBytes = commands.getstatusoutput(getInterfaceRead)
		sendstatus, actualSendBytes = commands.getstatusoutput(getInterfaceSent)
		readBits=float(actualReadBytes)*8/divisor
		sendBits=float(actualSendBytes)*8/divisor
		print str(interfaceID)+": "+i+": Speed: "+str(calcSpeed)+prefixOutput+"b/s "+str(readBits)+prefixOutput+" rx, "+str(sendBits)+prefixOutput+" tx"
		print int((readBits/calcSpeed)*100)
		print int((sendBits/calcSpeed)*100)
		if (int((readBits/calcSpeed)*100)) > critical or(int((sendBits/calcSpeed)*100)) > critical:
			outputlist.append([2,str(readBits),str(sendBits)])
		if (int((readBits/calcSpeed)*100)) > warning or(int((sendBits/calcSpeed)*100)) > warning:
			outputlist.append([1,str(readBits),str(sendBits)])
		if (int((readBits/calcSpeed)*100)) < warning and(int((sendBits/calcSpeed)*100)) < warning:
			outputlist.append([0,str(readBits),str(sendBits)])
	
	elif speed > "0":
		readstatus, actualReadBytes = commands.getstatusoutput(getInterfaceRead)
		sendstatus, actualSendBytes = commands.getstatusoutput(getInterfaceSent)
		readBits=float(actualReadBytes)*8/divisor
		sendBits=float(actualSendBytes)*8/divisor
		print str(interfaceID)+": "+i+": Speed: "+str(calcSpeed)+prefixOutput+"b/s "+str(readBits)+prefixOutput+" rx, "+str(sendBits)+prefixOutput+" tx"
		print int((readBits/calcSpeed)*100)
		print int((sendBits/calcSpeed)*100)
		if (int((readBits/calcSpeed)*100)) > critical or(int((sendBits/calcSpeed)*100)) > critical:
			outputlist.append([2,str(readBits),str(sendBits)])
		if (int((readBits/calcSpeed)*100)) > warning or(int((sendBits/calcSpeed)*100)) > warning:
			outputlist.append([1,str(readBits),str(sendBits)])
		if (int((readBits/calcSpeed)*100)) < warning and(int((sendBits/calcSpeed)*100)) < warning:
			outputlist.append([0,str(readBits),str(sendBits)])
	interfaceID+=1
print outputlist
exit()

